/* Generated by: CongoCC Parser Generator. SqlExprParser.java  */
package net.magneticpotato.sqlexpr.congocc.parser;

import org.apache.activemq.filter.UnaryExpression;
import org.apache.activemq.filter.PropertyExpression;
import org.apache.activemq.filter.LogicExpression;
import org.apache.activemq.filter.Expression;
import org.apache.activemq.filter.ConstantExpression;
import org.apache.activemq.filter.ComparisonExpression;
import org.apache.activemq.filter.BooleanExpression;
import org.apache.activemq.filter.ArithmeticExpression;
import jakarta.jms.InvalidSelectorException;
import java.util.Collections;
import java.util.ArrayList;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import net.magneticpotato.sqlexpr.congocc.parser.Token.TokenType;
import static net.magneticpotato.sqlexpr.congocc.parser.Token.TokenType.*;
import net.magneticpotato.sqlexpr.congocc.parser.ast.JmsSelector;
import net.magneticpotato.sqlexpr.congocc.parser.ast.orExpression;
import net.magneticpotato.sqlexpr.congocc.parser.ast.andExpression;
import net.magneticpotato.sqlexpr.congocc.parser.ast.equalityExpression;
import net.magneticpotato.sqlexpr.congocc.parser.ast.comparisonExpression;
import net.magneticpotato.sqlexpr.congocc.parser.ast.addExpression;
import net.magneticpotato.sqlexpr.congocc.parser.ast.multExpr;
import net.magneticpotato.sqlexpr.congocc.parser.ast.unaryExpr;
import net.magneticpotato.sqlexpr.congocc.parser.ast.primaryExpr;
import net.magneticpotato.sqlexpr.congocc.parser.ast.literal;
import net.magneticpotato.sqlexpr.congocc.parser.ast.stringLitteral;
import net.magneticpotato.sqlexpr.congocc.parser.ast.variable;


public class SqlExprParser {

    public static BooleanExpression parse(String sql) throws InvalidSelectorException {
        return new SqlExprParser(sql).parse();
    }

    public String getInputString() {
        return getInputSource().toString();
    }

    protected BooleanExpression parse() throws InvalidSelectorException {
        try {
            return this.JmsSelector();
        } catch (Throwable e) {
            throw(InvalidSelectorException) new InvalidSelectorException(getInputSource().toString()).initCause(e);
        }
    }

    private BooleanExpression asBooleanExpression(Expression value) throws ParseException {
        if (value instanceof BooleanExpression) {
            return (BooleanExpression) value;
        }
        if (value instanceof PropertyExpression) {
            return UnaryExpression.createBooleanCast(value);
        }
        throw new ParseException("Expression will not result in a boolean value: " + value);
    }

    static final int UNLIMITED = Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    // Normally null when parsing, populated when doing lookahead
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean hitFailure;
    private boolean passedPredicate;
    private int passedPredicateThreshold = -1;
    private String currentlyParsedProduction;
    private String currentLookaheadProduction;
    private int lookaheadRoutineNesting;
    private final boolean legacyGlitchyLookahead = false;
    private final Token DUMMY_START_TOKEN = new Token();
    private boolean cancelled;

    public void cancel() {
        cancelled = true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    private SqlExprParserLexer token_source;

    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public SqlExprParser(String inputSource, CharSequence content) {
        this(new SqlExprParserLexer(inputSource, content));
    }

    public SqlExprParser(CharSequence content) {
        this("input", content);
    }

    /**
    * @param inputSource just the name of the input source (typically the filename) that
    * will be used in error messages and so on.
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public SqlExprParser(String inputSource, Path path) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path)));
    }

    public SqlExprParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, TokenSource.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
    * @param path The location (typically the filename) from which to get the input to parse
    */
    public SqlExprParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /** Constructor with user supplied Lexer. */
    public SqlExprParser(SqlExprParserLexer lexer) {
        token_source = lexer;
        lastConsumedToken = DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    /**
    * Set the starting line/column for location reporting.
    * By default, this is 1,1.
    */
    public void setStartingPos(int startingLine, int startingColumn) {
        token_source.setStartingPos(startingLine, startingColumn);
    }

    // this method is for testing only.
    public boolean getLegacyGlitchyLookahead() {
        return legacyGlitchyLookahead;
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    private Token nextToken(final Token tok) {
        Token result = token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result = token_source.getNextToken(result);
        }
        nextTokenType = null;
        return result;
    }

    /**
    * @return the next Token off the stream. This is the same as #getToken(1)
    */
    public final Token getNextToken() {
        return getToken(1);
    }

    /**
    * @param index how many tokens to look ahead
    * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream.
    * If we are in a lookahead, it looks ahead from the currentLookaheadToken
    * Otherwise, it is the lastConsumedToken. If you pass in a negative
    * number it goes backward.
    */
    public final Token getToken(final int index) {
        Token t = currentLookaheadToken == null ? lastConsumedToken : currentLookaheadToken;
        for (int i = 0; i < index; i++) {
            t = nextToken(t);
        }
        for (int i = 0; i > index; i--) {
            t = t.getPrevious();
            if (t == null) break;
        }
        return t;
    }

    private TokenType nextTokenType() {
        if (nextTokenType == null) {
            nextTokenType = nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        if (token_source.activeTokenTypes == null) return false;
        boolean result = false;
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.add(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result = false;
        if (token_source.activeTokenTypes == null) {
            token_source.activeTokenTypes = EnumSet.allOf(TokenType.class);
        }
        for (TokenType tt : types) {
            result |= token_source.activeTokenTypes.remove(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType = null;
        }
        return result;
    }

    private static final HashMap<TokenType[], EnumSet<TokenType>> enumSetCache = new HashMap<>();

    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key = new TokenType[1 + rest.length];
        key[0] = first;
        if (rest.length > 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result = (rest.length == 0) ? EnumSet.of(first) : EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    // src/main/resources/SqlExprParser.ccc:165:1
    final public BooleanExpression JmsSelector() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "JmsSelector";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:165:1
        JmsSelector thisProduction = null;
        if (buildTree) {
            thisProduction = new JmsSelector();
            openNodeScope(thisProduction);
        }
        Expression left = null;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:170:9
            pushOntoCallStack("JmsSelector", "src/main/resources/SqlExprParser.ccc", 170, 9);
            try {
                left = orExpression();
            } finally {
                popCallStack();
            }
            // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:170:29
            consumeToken(EOF);
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:172:5
            return asBooleanExpression(left);
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:179:1
    final public Expression orExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "orExpression";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:179:1
        orExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new orExpression();
            openNodeScope(thisProduction);
        }
        Expression left;
        Expression right;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:185:9
            pushOntoCallStack("orExpression", "src/main/resources/SqlExprParser.ccc", 185, 9);
            try {
                left = andExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:186:9
            while (true) {
                if (!(nextTokenType() == OR)) break;
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:187:13
                consumeToken(OR);
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:187:18
                pushOntoCallStack("orExpression", "src/main/resources/SqlExprParser.ccc", 187, 18);
                try {
                    right = andExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:188:13
                left = LogicExpression.createOR(asBooleanExpression(left), asBooleanExpression(right));
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:193:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:201:1
    final public Expression andExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "andExpression";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:201:1
        andExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new andExpression();
            openNodeScope(thisProduction);
        }
        Expression left;
        Expression right;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:207:9
            pushOntoCallStack("andExpression", "src/main/resources/SqlExprParser.ccc", 207, 9);
            try {
                left = equalityExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:208:9
            while (true) {
                if (!(nextTokenType() == AND)) break;
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:209:13
                consumeToken(AND);
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:209:19
                pushOntoCallStack("andExpression", "src/main/resources/SqlExprParser.ccc", 209, 19);
                try {
                    right = equalityExpression();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:210:13
                left = LogicExpression.createAND(asBooleanExpression(left), asBooleanExpression(right));
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:215:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:221:1
    final public Expression equalityExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "equalityExpression";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:221:1
        equalityExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new equalityExpression();
            openNodeScope(thisProduction);
        }
        Expression left;
        Expression right;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:227:9
            pushOntoCallStack("equalityExpression", "src/main/resources/SqlExprParser.ccc", 227, 9);
            try {
                left = comparisonExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:228:9
            while (true) {
                // Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:230:13
                if (nextTokenType() == _TOKEN_17) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:230:13
                    consumeToken(_TOKEN_17);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:230:17
                    pushOntoCallStack("equalityExpression", "src/main/resources/SqlExprParser.ccc", 230, 17);
                    try {
                        right = comparisonExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:231:13
                    left = ComparisonExpression.createEqual(left, right);
                } else if (nextTokenType() == _TOKEN_18) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:235:13
                    consumeToken(_TOKEN_18);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:235:18
                    pushOntoCallStack("equalityExpression", "src/main/resources/SqlExprParser.ccc", 235, 18);
                    try {
                        right = comparisonExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:236:13
                    left = ComparisonExpression.createNotEqual(left, right);
                } else if (scan$SqlExprParser_ccc$240$13()) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:241:13
                    consumeToken(IS);
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:241:18
                    consumeToken(NULL);
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:242:13
                    left = ComparisonExpression.createIsNull(left);
                } else if (nextTokenType() == IS) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:246:13
                    consumeToken(IS);
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:246:18
                    consumeToken(NOT);
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:246:24
                    consumeToken(NULL);
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:247:13
                    left = ComparisonExpression.createIsNotNull(left);
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:252:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:258:1
    final public Expression comparisonExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "comparisonExpression";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:258:1
        comparisonExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new comparisonExpression();
            openNodeScope(thisProduction);
        }
        Expression left;
        Expression right;
        Expression low;
        Expression high;
        String t, u;
        boolean not;
        ArrayList list;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:269:9
            pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 269, 9);
            try {
                left = addExpression();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:270:9
            while (true) {
                // Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:272:17
                if (nextTokenType() == _TOKEN_19) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:272:17
                    consumeToken(_TOKEN_19);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:272:21
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 272, 21);
                    try {
                        right = addExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:273:17
                    left = ComparisonExpression.createGreaterThan(left, right);
                } else if (nextTokenType() == _TOKEN_20) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:277:17
                    consumeToken(_TOKEN_20);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:277:22
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 277, 22);
                    try {
                        right = addExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:278:17
                    left = ComparisonExpression.createGreaterThanEqual(left, right);
                } else if (nextTokenType() == _TOKEN_21) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:282:17
                    consumeToken(_TOKEN_21);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:282:21
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 282, 21);
                    try {
                        right = addExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:283:17
                    left = ComparisonExpression.createLessThan(left, right);
                } else if (nextTokenType() == _TOKEN_22) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:287:17
                    consumeToken(_TOKEN_22);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:287:22
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 287, 22);
                    try {
                        right = addExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:288:17
                    left = ComparisonExpression.createLessThanEqual(left, right);
                } else if (nextTokenType() == LIKE) {
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:292:17
                    u = null;
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:295:17
                    consumeToken(LIKE);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:295:24
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 295, 24);
                    try {
                        t = stringLitteral();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at src/main/resources/SqlExprParser.ccc:296:21
                    if (nextTokenType() == ESCAPE) {
                        // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:296:23
                        consumeToken(ESCAPE);
                        // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:296:32
                        pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 296, 32);
                        try {
                            u = stringLitteral();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:297:17
                    left = ComparisonExpression.createLike(left, t, u);
                } else if (scan$SqlExprParser_ccc$301$17()) {
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:302:17
                    u = null;
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:305:17
                    consumeToken(NOT);
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:305:23
                    consumeToken(LIKE);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:305:30
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 305, 30);
                    try {
                        t = stringLitteral();
                    } finally {
                        popCallStack();
                    }
                    // Code for ZeroOrOne specified at src/main/resources/SqlExprParser.ccc:305:49
                    if (nextTokenType() == ESCAPE) {
                        // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:305:51
                        consumeToken(ESCAPE);
                        // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:305:60
                        pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 305, 60);
                        try {
                            u = stringLitteral();
                        } finally {
                            popCallStack();
                        }
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:306:17
                    left = ComparisonExpression.createNotLike(left, t, u);
                } else if (nextTokenType() == BETWEEN) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:310:17
                    consumeToken(BETWEEN);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:310:27
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 310, 27);
                    try {
                        low = addExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:310:47
                    consumeToken(AND);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:310:53
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 310, 53);
                    try {
                        high = addExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:311:17
                    left = ComparisonExpression.createBetween(left, low, high);
                } else if (scan$SqlExprParser_ccc$315$17()) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:17
                    consumeToken(NOT);
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:23
                    consumeToken(BETWEEN);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:316:33
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 316, 33);
                    try {
                        low = addExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:53
                    consumeToken(AND);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:316:59
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 316, 59);
                    try {
                        high = addExpression();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:317:17
                    left = ComparisonExpression.createNotBetween(left, low, high);
                } else if (nextTokenType() == IN) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:321:17
                    consumeToken(IN);
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:322:17
                    consumeToken(_TOKEN_23);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:323:21
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 323, 21);
                    try {
                        t = stringLitteral();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:324:21
                    list = new ArrayList();
                    list.add(t);
                    // Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:328:21
                    while (true) {
                        if (!(nextTokenType() == _TOKEN_24)) break;
                        // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:329:25
                        consumeToken(_TOKEN_24);
                        // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:330:25
                        pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 330, 25);
                        try {
                            t = stringLitteral();
                        } finally {
                            popCallStack();
                        }
                        // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:331:25
                        list.add(t);
                    }
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:336:17
                    consumeToken(_TOKEN_25);
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:337:17
                    left = ComparisonExpression.createInFilter(left, list);
                } else if (scan$SqlExprParser_ccc$341$17()) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:342:17
                    consumeToken(NOT);
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:342:23
                    consumeToken(IN);
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:343:17
                    consumeToken(_TOKEN_23);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:344:21
                    pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 344, 21);
                    try {
                        t = stringLitteral();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:345:21
                    list = new ArrayList();
                    list.add(t);
                    // Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:349:21
                    while (true) {
                        if (!(nextTokenType() == _TOKEN_24)) break;
                        // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:350:25
                        consumeToken(_TOKEN_24);
                        // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:351:25
                        pushOntoCallStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 351, 25);
                        try {
                            t = stringLitteral();
                        } finally {
                            popCallStack();
                        }
                        // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:352:25
                        list.add(t);
                    }
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:357:17
                    consumeToken(_TOKEN_25);
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:358:17
                    left = ComparisonExpression.createNotInFilter(left, list);
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:364:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:370:1
    final public Expression addExpression() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "addExpression";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:370:1
        addExpression thisProduction = null;
        if (buildTree) {
            thisProduction = new addExpression();
            openNodeScope(thisProduction);
        }
        Expression left;
        Expression right;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:375:5
            pushOntoCallStack("addExpression", "src/main/resources/SqlExprParser.ccc", 375, 5);
            try {
                left = multExpr();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:376:5
            while (true) {
                if (!(scan$SqlExprParser_ccc$377$9())) break;
                if (nextTokenType() == _TOKEN_26) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:379:13
                    consumeToken(_TOKEN_26);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:379:17
                    pushOntoCallStack("addExpression", "src/main/resources/SqlExprParser.ccc", 379, 17);
                    try {
                        right = multExpr();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:380:13
                    left = ArithmeticExpression.createPlus(left, right);
                } else if (nextTokenType() == _TOKEN_27) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:384:13
                    consumeToken(_TOKEN_27);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:384:17
                    pushOntoCallStack("addExpression", "src/main/resources/SqlExprParser.ccc", 384, 17);
                    try {
                        right = multExpr();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:385:13
                    left = ArithmeticExpression.createMinus(left, right);
                } else {
                    pushOntoCallStack("addExpression", "src/main/resources/SqlExprParser.ccc", 379, 13);
                    throw new ParseException(lastConsumedToken, first_set$SqlExprParser_ccc$379$13, parsingStack);
                }
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:391:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:397:1
    final public Expression multExpr() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "multExpr";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:397:1
        multExpr thisProduction = null;
        if (buildTree) {
            thisProduction = new multExpr();
            openNodeScope(thisProduction);
        }
        Expression left;
        Expression right;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:402:5
            pushOntoCallStack("multExpr", "src/main/resources/SqlExprParser.ccc", 402, 5);
            try {
                left = unaryExpr();
            } finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:403:5
            while (true) {
                // Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:404:9
                if (nextTokenType() == _TOKEN_28) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:404:9
                    consumeToken(_TOKEN_28);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:404:13
                    pushOntoCallStack("multExpr", "src/main/resources/SqlExprParser.ccc", 404, 13);
                    try {
                        right = unaryExpr();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:405:9
                    left = ArithmeticExpression.createMultiply(left, right);
                } else if (nextTokenType() == _TOKEN_29) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:409:9
                    consumeToken(_TOKEN_29);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:409:13
                    pushOntoCallStack("multExpr", "src/main/resources/SqlExprParser.ccc", 409, 13);
                    try {
                        right = unaryExpr();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:410:9
                    left = ArithmeticExpression.createDivide(left, right);
                } else if (nextTokenType() == _TOKEN_30) {
                    // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:414:9
                    consumeToken(_TOKEN_30);
                    // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:414:13
                    pushOntoCallStack("multExpr", "src/main/resources/SqlExprParser.ccc", 414, 13);
                    try {
                        right = unaryExpr();
                    } finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:415:9
                    left = ArithmeticExpression.createMod(left, right);
                } else {
                    break;
                }
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:420:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:427:1
    final public Expression unaryExpr() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "unaryExpr";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:427:1
        unaryExpr thisProduction = null;
        if (buildTree) {
            thisProduction = new unaryExpr();
            openNodeScope(thisProduction);
        }
        String s = null;
        Expression left = null;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (scan$SqlExprParser_ccc$433$9()) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:434:9
                consumeToken(_TOKEN_26);
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:434:13
                pushOntoCallStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 434, 13);
                try {
                    left = unaryExpr();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == _TOKEN_27) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:436:9
                consumeToken(_TOKEN_27);
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:436:13
                pushOntoCallStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 436, 13);
                try {
                    left = unaryExpr();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:437:9
                left = UnaryExpression.createNegate(left);
            } else if (nextTokenType() == NOT) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:441:9
                consumeToken(NOT);
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:441:15
                pushOntoCallStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 441, 15);
                try {
                    left = unaryExpr();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:442:9
                left = UnaryExpression.createNOT(asBooleanExpression(left));
            } else if (first_set$SqlExprParser_ccc$446$9.contains(nextTokenType())) {
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:446:9
                pushOntoCallStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 446, 9);
                try {
                    left = primaryExpr();
                } finally {
                    popCallStack();
                }
            } else {
                pushOntoCallStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 433, 9);
                throw new ParseException(lastConsumedToken, first_set$SqlExprParser_ccc$433$9, parsingStack);
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:448:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:455:1
    final public Expression primaryExpr() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "primaryExpr";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:455:1
        primaryExpr thisProduction = null;
        if (buildTree) {
            thisProduction = new primaryExpr();
            openNodeScope(thisProduction);
        }
        Expression left = null;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (first_set$SqlExprParser_ccc$460$9.contains(nextTokenType())) {
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:460:9
                pushOntoCallStack("primaryExpr", "src/main/resources/SqlExprParser.ccc", 460, 9);
                try {
                    left = literal();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == ID) {
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:462:9
                pushOntoCallStack("primaryExpr", "src/main/resources/SqlExprParser.ccc", 462, 9);
                try {
                    left = variable();
                } finally {
                    popCallStack();
                }
            } else if (nextTokenType() == _TOKEN_23) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:464:9
                consumeToken(_TOKEN_23);
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:464:13
                pushOntoCallStack("primaryExpr", "src/main/resources/SqlExprParser.ccc", 464, 13);
                try {
                    left = orExpression();
                } finally {
                    popCallStack();
                }
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:464:33
                consumeToken(_TOKEN_25);
            } else {
                pushOntoCallStack("primaryExpr", "src/main/resources/SqlExprParser.ccc", 460, 9);
                throw new ParseException(lastConsumedToken, first_set$SqlExprParser_ccc$460$9$, parsingStack);
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:466:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:474:1
    final public ConstantExpression literal() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "literal";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:474:1
        literal thisProduction = null;
        if (buildTree) {
            thisProduction = new literal();
            openNodeScope(thisProduction);
        }
        Token t;
        String s;
        ConstantExpression left = null;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            if (nextTokenType() == STRING_LITERAL) {
                // Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:482:13
                pushOntoCallStack("literal", "src/main/resources/SqlExprParser.ccc", 482, 13);
                try {
                    s = stringLitteral();
                } finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:483:13
                left = new ConstantExpression(s);
            } else if (nextTokenType() == DECIMAL_LITERAL) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:489:13
                t = consumeToken(DECIMAL_LITERAL);
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:490:13
                left = ConstantExpression.createFromDecimal(t.toString());
            } else if (nextTokenType() == HEX_LITERAL) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:496:13
                t = consumeToken(HEX_LITERAL);
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:497:13
                left = ConstantExpression.createFromHex(t.toString());
            } else if (nextTokenType() == OCTAL_LITERAL) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:503:13
                t = consumeToken(OCTAL_LITERAL);
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:504:13
                left = ConstantExpression.createFromOctal(t.toString());
            } else if (nextTokenType() == FLOATING_POINT_LITERAL) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:510:13
                t = consumeToken(FLOATING_POINT_LITERAL);
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:511:13
                left = ConstantExpression.createFloat(t.toString());
            } else if (nextTokenType() == TRUE) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:517:13
                consumeToken(TRUE);
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:518:13
                left = ConstantExpression.TRUE;
            } else if (nextTokenType() == FALSE) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:524:13
                consumeToken(FALSE);
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:525:13
                left = ConstantExpression.FALSE;
            } else if (nextTokenType() == NULL) {
                // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:531:13
                consumeToken(NULL);
                // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:532:13
                left = ConstantExpression.NULL;
            } else {
                pushOntoCallStack("literal", "src/main/resources/SqlExprParser.ccc", 481, 9);
                throw new ParseException(lastConsumedToken, first_set$SqlExprParser_ccc$481$9, parsingStack);
            }
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:537:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:543:1
    final public String stringLitteral() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "stringLitteral";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:543:1
        stringLitteral thisProduction = null;
        if (buildTree) {
            thisProduction = new stringLitteral();
            openNodeScope(thisProduction);
        }
        Token t;
        StringBuffer rc = new StringBuffer();
        boolean first = true;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:549:5
            t = consumeToken(STRING_LITERAL);
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:550:5
            // Decode the sting value.
            String image = t.toString();
            for (int i = 1; i < image.length() - 1; i++) {
                char c = image.charAt(i);
                if (c == '\'') i++;
                rc.append(c);
            }
            return rc.toString();
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    // src/main/resources/SqlExprParser.ccc:564:1
    final public PropertyExpression variable() {
        if (cancelled) throw new CancellationException();
        this.currentlyParsedProduction = "variable";
        // Code for BNFProduction specified at src/main/resources/SqlExprParser.ccc:564:1
        variable thisProduction = null;
        if (buildTree) {
            thisProduction = new variable();
            openNodeScope(thisProduction);
        }
        Token t;
        PropertyExpression left = null;
        ParseException parseException3 = null;
        int callStackSize4 = parsingStack.size();
        try {
            // Code for Terminal specified at src/main/resources/SqlExprParser.ccc:570:9
            t = consumeToken(ID);
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:571:9
            left = new PropertyExpression(t.toString());
            // Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:575:5
            return left;
        } catch (ParseException e) {
            parseException3 = e;
            throw e;
        } finally {
            restoreCallStack(callStackSize4);
            if (thisProduction != null) {
                if (parseException3 == null) {
                    closeNodeScope(thisProduction, nodeArity() > 1);
                } else {
                    clearNodeScope();
                }
            }
        }
    }

    private static final EnumSet<TokenType> first_set$SqlExprParser_ccc$379$13 = tokenTypeSet(_TOKEN_26, _TOKEN_27);
    private static final EnumSet<TokenType> first_set$SqlExprParser_ccc$433$9 = first_set$SqlExprParser_ccc$433$9_init();

    private static EnumSet<TokenType> first_set$SqlExprParser_ccc$433$9_init() {
        return tokenTypeSet(NOT, TRUE, FALSE, NULL, _TOKEN_23, _TOKEN_26, _TOKEN_27, DECIMAL_LITERAL, HEX_LITERAL, OCTAL_LITERAL, FLOATING_POINT_LITERAL, STRING_LITERAL, ID);
    }

    private static final EnumSet<TokenType> first_set$SqlExprParser_ccc$446$9 = first_set$SqlExprParser_ccc$446$9_init();

    private static EnumSet<TokenType> first_set$SqlExprParser_ccc$446$9_init() {
        return tokenTypeSet(TRUE, FALSE, NULL, _TOKEN_23, DECIMAL_LITERAL, HEX_LITERAL, OCTAL_LITERAL, FLOATING_POINT_LITERAL, STRING_LITERAL, ID);
    }

    private static final EnumSet<TokenType> first_set$SqlExprParser_ccc$460$9$ = first_set$SqlExprParser_ccc$460$9$_init();

    private static EnumSet<TokenType> first_set$SqlExprParser_ccc$460$9$_init() {
        return tokenTypeSet(TRUE, FALSE, NULL, _TOKEN_23, DECIMAL_LITERAL, HEX_LITERAL, OCTAL_LITERAL, FLOATING_POINT_LITERAL, STRING_LITERAL, ID);
    }

    private static final EnumSet<TokenType> first_set$SqlExprParser_ccc$460$9 = first_set$SqlExprParser_ccc$460$9_init();

    private static EnumSet<TokenType> first_set$SqlExprParser_ccc$460$9_init() {
        return tokenTypeSet(TRUE, FALSE, NULL, DECIMAL_LITERAL, HEX_LITERAL, OCTAL_LITERAL, FLOATING_POINT_LITERAL, STRING_LITERAL);
    }

    private static final EnumSet<TokenType> first_set$SqlExprParser_ccc$481$9 = first_set$SqlExprParser_ccc$481$9_init();

    private static EnumSet<TokenType> first_set$SqlExprParser_ccc$481$9_init() {
        return tokenTypeSet(TRUE, FALSE, NULL, DECIMAL_LITERAL, HEX_LITERAL, OCTAL_LITERAL, FLOATING_POINT_LITERAL, STRING_LITERAL);
    }

    private boolean scanToken(TokenType expectedType, TokenType...additionalTypes) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (type != expectedType) {
            boolean matched = false;
            for (TokenType tt : additionalTypes) {
                if (type == tt) {
                    matched = true;
                    break;
                }
            }
            if (!matched) return false;
        }
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    private boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken = nextToken(currentLookaheadToken);
        TokenType type = peekedToken.getType();
        if (!types.contains(type)) return false;
        --remainingLookahead;
        currentLookaheadToken = peekedToken;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:187:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$187$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:187:13
            if (!scanToken(OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:187:18
            // NonTerminal andExpression at src/main/resources/SqlExprParser.ccc:187:18
            pushOntoLookaheadStack("orExpression", "src/main/resources/SqlExprParser.ccc", 187, 18);
            currentLookaheadProduction = "andExpression";
            try {
                if (!check$andExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:188:13
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:209:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$209$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:209:13
            if (!scanToken(AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:209:19
            // NonTerminal equalityExpression at src/main/resources/SqlExprParser.ccc:209:19
            pushOntoLookaheadStack("andExpression", "src/main/resources/SqlExprParser.ccc", 209, 19);
            currentLookaheadProduction = "equalityExpression";
            try {
                if (!check$equalityExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:210:13
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:230:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$230$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:230:13
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$230$13$(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$235$13(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$SqlExprParser_ccc$240$13(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$SqlExprParser_ccc$246$13(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                return false;
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:230:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$230$13$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:230:13
            if (!scanToken(_TOKEN_17)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:230:17
            // NonTerminal comparisonExpression at src/main/resources/SqlExprParser.ccc:230:17
            pushOntoLookaheadStack("equalityExpression", "src/main/resources/SqlExprParser.ccc", 230, 17);
            currentLookaheadProduction = "comparisonExpression";
            try {
                if (!check$comparisonExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:231:13
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:235:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$235$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:235:13
            if (!scanToken(_TOKEN_18)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:235:18
            // NonTerminal comparisonExpression at src/main/resources/SqlExprParser.ccc:235:18
            pushOntoLookaheadStack("equalityExpression", "src/main/resources/SqlExprParser.ccc", 235, 18);
            currentLookaheadProduction = "comparisonExpression";
            try {
                if (!check$comparisonExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:236:13
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:240:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$240$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:241:13
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:241:18
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:242:13
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:246:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$246$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:246:13
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:246:18
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:246:24
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:247:13
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:272:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$272$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:272:17
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$272$17$(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$277$17(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$SqlExprParser_ccc$282$17(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                            passedPredicate = false;
                            if (!check$SqlExprParser_ccc$287$17(false)) {
                                currentLookaheadToken = token2;
                                remainingLookahead = remainingLookahead2;
                                hitFailure = hitFailure2;
                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                passedPredicate = false;
                                if (!check$SqlExprParser_ccc$292$17(false)) {
                                    currentLookaheadToken = token2;
                                    remainingLookahead = remainingLookahead2;
                                    hitFailure = hitFailure2;
                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                    passedPredicate = false;
                                    if (!check$SqlExprParser_ccc$301$17(false)) {
                                        currentLookaheadToken = token2;
                                        remainingLookahead = remainingLookahead2;
                                        hitFailure = hitFailure2;
                                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                                        passedPredicate = false;
                                        if (!check$SqlExprParser_ccc$310$17(false)) {
                                            currentLookaheadToken = token2;
                                            remainingLookahead = remainingLookahead2;
                                            hitFailure = hitFailure2;
                                            if (passedPredicate && !legacyGlitchyLookahead) return false;
                                            passedPredicate = false;
                                            if (!check$SqlExprParser_ccc$315$17(false)) {
                                                currentLookaheadToken = token2;
                                                remainingLookahead = remainingLookahead2;
                                                hitFailure = hitFailure2;
                                                if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                passedPredicate = false;
                                                if (!check$SqlExprParser_ccc$321$17(false)) {
                                                    currentLookaheadToken = token2;
                                                    remainingLookahead = remainingLookahead2;
                                                    hitFailure = hitFailure2;
                                                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                                                    passedPredicate = false;
                                                    if (!check$SqlExprParser_ccc$341$17(false)) {
                                                        currentLookaheadToken = token2;
                                                        remainingLookahead = remainingLookahead2;
                                                        hitFailure = hitFailure2;
                                                        return false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:272:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$272$17$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:272:17
            if (!scanToken(_TOKEN_19)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:272:21
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:272:21
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 272, 21);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:273:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:277:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$277$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:277:17
            if (!scanToken(_TOKEN_20)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:277:22
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:277:22
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 277, 22);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:278:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:282:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$282$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:282:17
            if (!scanToken(_TOKEN_21)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:282:21
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:282:21
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 282, 21);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:283:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:287:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$287$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:287:17
            if (!scanToken(_TOKEN_22)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:287:22
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:287:22
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 287, 22);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:288:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:292:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$292$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:292:17
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:295:17
            if (!scanToken(LIKE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:295:24
            if (!scanToken(STRING_LITERAL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at src/main/resources/SqlExprParser.ccc:296:21
            Token token6 = currentLookaheadToken;
            boolean passedPredicate6 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$SqlExprParser_ccc$296$23(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token6;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate6;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:297:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:296:23
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$296$23(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:296:23
            if (!scanToken(ESCAPE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:296:32
            if (!scanToken(STRING_LITERAL)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:301:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$301$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:302:17
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:305:17
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:305:23
            if (!scanToken(LIKE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:305:30
            if (!scanToken(STRING_LITERAL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at src/main/resources/SqlExprParser.ccc:305:49
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$SqlExprParser_ccc$305$51(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:306:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:305:51
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$305$51(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:305:51
            if (!scanToken(ESCAPE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:305:60
            if (!scanToken(STRING_LITERAL)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:310:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$310$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:310:17
            if (!scanToken(BETWEEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:310:27
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:310:27
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 310, 27);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:310:47
            if (!scanToken(AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:310:53
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:310:53
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 310, 53);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:311:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:315:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$315$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:17
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:23
            if (!scanToken(BETWEEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:316:33
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:316:33
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 316, 33);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:53
            if (!scanToken(AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:316:59
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:316:59
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 316, 59);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:317:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:321:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$321$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:321:17
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:322:17
            if (!scanToken(_TOKEN_23)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:323:21
            if (!scanToken(STRING_LITERAL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:324:21
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:328:21
            boolean passedPredicate7 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token8 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$329$25(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token8;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:336:17
            if (!scanToken(_TOKEN_25)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:337:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:329:25
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$329$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:329:25
            if (!scanToken(_TOKEN_24)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:330:25
            if (!scanToken(STRING_LITERAL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:331:25
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:341:17
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$341$17(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:342:17
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:342:23
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:343:17
            if (!scanToken(_TOKEN_23)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:344:21
            if (!scanToken(STRING_LITERAL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:345:21
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:349:21
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$350$25(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:357:17
            if (!scanToken(_TOKEN_25)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:358:17
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:350:25
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$350$25(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:350:25
            if (!scanToken(_TOKEN_24)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:351:25
            if (!scanToken(STRING_LITERAL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:352:25
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:377:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$377$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$SqlExprParser_ccc$377$15(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:379:13
            Token token4 = currentLookaheadToken;
            int remainingLookahead4 = remainingLookahead;
            boolean hitFailure4 = hitFailure;
            boolean passedPredicate4 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$379$13(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$384$13(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            } finally {
                passedPredicate = passedPredicate4;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:379:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$379$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:379:13
            if (!scanToken(_TOKEN_26)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:379:17
            // NonTerminal multExpr at src/main/resources/SqlExprParser.ccc:379:17
            pushOntoLookaheadStack("addExpression", "src/main/resources/SqlExprParser.ccc", 379, 17);
            currentLookaheadProduction = "multExpr";
            try {
                if (!check$multExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:380:13
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:384:13
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$384$13(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:384:13
            if (!scanToken(_TOKEN_27)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:384:17
            // NonTerminal multExpr at src/main/resources/SqlExprParser.ccc:384:17
            pushOntoLookaheadStack("addExpression", "src/main/resources/SqlExprParser.ccc", 384, 17);
            currentLookaheadProduction = "multExpr";
            try {
                if (!check$multExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:385:13
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:404:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$404$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:404:9
            Token token2 = currentLookaheadToken;
            int remainingLookahead2 = remainingLookahead;
            boolean hitFailure2 = hitFailure;
            boolean passedPredicate2 = passedPredicate;
            try {
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$404$9$(false)) {
                    currentLookaheadToken = token2;
                    remainingLookahead = remainingLookahead2;
                    hitFailure = hitFailure2;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$409$9(false)) {
                        currentLookaheadToken = token2;
                        remainingLookahead = remainingLookahead2;
                        hitFailure = hitFailure2;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$SqlExprParser_ccc$414$9(false)) {
                            currentLookaheadToken = token2;
                            remainingLookahead = remainingLookahead2;
                            hitFailure = hitFailure2;
                            return false;
                        }
                    }
                }
            } finally {
                passedPredicate = passedPredicate2;
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:404:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$404$9$(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:404:9
            if (!scanToken(_TOKEN_28)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:404:13
            // NonTerminal unaryExpr at src/main/resources/SqlExprParser.ccc:404:13
            pushOntoLookaheadStack("multExpr", "src/main/resources/SqlExprParser.ccc", 404, 13);
            currentLookaheadProduction = "unaryExpr";
            try {
                if (!check$unaryExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:405:9
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:409:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$409$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:409:9
            if (!scanToken(_TOKEN_29)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:409:13
            // NonTerminal unaryExpr at src/main/resources/SqlExprParser.ccc:409:13
            pushOntoLookaheadStack("multExpr", "src/main/resources/SqlExprParser.ccc", 409, 13);
            currentLookaheadProduction = "unaryExpr";
            try {
                if (!check$unaryExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:410:9
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:414:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$414$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:414:9
            if (!scanToken(_TOKEN_30)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:414:13
            // NonTerminal unaryExpr at src/main/resources/SqlExprParser.ccc:414:13
            pushOntoLookaheadStack("multExpr", "src/main/resources/SqlExprParser.ccc", 414, 13);
            currentLookaheadProduction = "unaryExpr";
            try {
                if (!check$unaryExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:415:9
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:433:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$433$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$SqlExprParser_ccc$433$15(true)) return false;
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:434:9
            if (!scanToken(_TOKEN_26)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:434:13
            // NonTerminal unaryExpr at src/main/resources/SqlExprParser.ccc:434:13
            pushOntoLookaheadStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 434, 13);
            currentLookaheadProduction = "unaryExpr";
            try {
                if (!check$unaryExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:436:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$436$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:436:9
            if (!scanToken(_TOKEN_27)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:436:13
            // NonTerminal unaryExpr at src/main/resources/SqlExprParser.ccc:436:13
            pushOntoLookaheadStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 436, 13);
            currentLookaheadProduction = "unaryExpr";
            try {
                if (!check$unaryExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:437:9
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:441:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$441$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:441:9
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:441:15
            // NonTerminal unaryExpr at src/main/resources/SqlExprParser.ccc:441:15
            pushOntoLookaheadStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 441, 15);
            currentLookaheadProduction = "unaryExpr";
            try {
                if (!check$unaryExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:442:9
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:446:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$446$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:446:9
            // NonTerminal primaryExpr at src/main/resources/SqlExprParser.ccc:446:9
            pushOntoLookaheadStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 446, 9);
            currentLookaheadProduction = "primaryExpr";
            try {
                if (!check$primaryExpr(false)) return false;
            } finally {
                popLookaheadStack();
            }
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // scanahead routine for expansion at:
    // src/main/resources/SqlExprParser.ccc:464:9
    // BuildScanRoutine macro
    private boolean check$SqlExprParser_ccc$464$9(boolean scanToEnd) {
        boolean reachedScanCode = false;
        int passedPredicateThreshold = remainingLookahead - 1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            reachedScanCode = true;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:464:9
            if (!scanToken(_TOKEN_23)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:464:13
            // NonTerminal orExpression at src/main/resources/SqlExprParser.ccc:464:13
            pushOntoLookaheadStack("primaryExpr", "src/main/resources/SqlExprParser.ccc", 464, 13);
            currentLookaheadProduction = "orExpression";
            try {
                if (!check$orExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:464:33
            if (!scanToken(_TOKEN_25)) return false;
        } finally {
            lookaheadRoutineNesting--;
            if (reachedScanCode && remainingLookahead <= passedPredicateThreshold) {
                passedPredicate = true;
            }
        }
        passedPredicate = false;
        return true;
    }

    // BuildPredicateRoutine: expansion at src/main/resources/SqlExprParser.ccc:240:13
    private boolean scan$SqlExprParser_ccc$240$13() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:241:13
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:241:18
            if (!scanToken(NULL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:242:13
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at src/main/resources/SqlExprParser.ccc:301:17
    private boolean scan$SqlExprParser_ccc$301$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:302:17
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:305:17
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:305:23
            if (!scanToken(LIKE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:305:30
            if (!scanToken(STRING_LITERAL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrOne specified at src/main/resources/SqlExprParser.ccc:305:49
            Token token7 = currentLookaheadToken;
            boolean passedPredicate7 = passedPredicate;
            passedPredicate = false;
            try {
                if (!check$SqlExprParser_ccc$305$51(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    hitFailure = false;
                }
            } finally {
                passedPredicate = passedPredicate7;
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:306:17
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at src/main/resources/SqlExprParser.ccc:315:17
    private boolean scan$SqlExprParser_ccc$315$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:17
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:23
            if (!scanToken(BETWEEN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:316:33
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:316:33
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 316, 33);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:316:53
            if (!scanToken(AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:316:59
            // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:316:59
            pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 316, 59);
            currentLookaheadProduction = "addExpression";
            try {
                if (!check$addExpression(true)) return false;
            } finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:317:17
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at src/main/resources/SqlExprParser.ccc:341:17
    private boolean scan$SqlExprParser_ccc$341$17() {
        remainingLookahead = 2;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:342:17
            if (!scanToken(NOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:342:23
            if (!scanToken(IN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:343:17
            if (!scanToken(_TOKEN_23)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:344:21
            if (!scanToken(STRING_LITERAL)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:345:21
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:349:21
            boolean passedPredicate8 = passedPredicate;
            try {
                while (remainingLookahead > 0 && !hitFailure) {
                    Token token9 = currentLookaheadToken;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$350$25(false)) {
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        currentLookaheadToken = token9;
                        break;
                    }
                }
            } finally {
                passedPredicate = passedPredicate8;
            }
            hitFailure = false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:357:17
            if (!scanToken(_TOKEN_25)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:358:17
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at src/main/resources/SqlExprParser.ccc:377:9
    private boolean scan$SqlExprParser_ccc$377$9() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$SqlExprParser_ccc$377$15(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // BuildPredicateRoutine: expansion at src/main/resources/SqlExprParser.ccc:433:9
    private boolean scan$SqlExprParser_ccc$433$9() {
        remainingLookahead = UNLIMITED;
        currentLookaheadToken = lastConsumedToken;
        final boolean scanToEnd = false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead <= 0) {
                passedPredicate = true;
                return !hitFailure;
            }
            if (!check$SqlExprParser_ccc$433$15(true)) return false;
            // End BuildPredicateCode macro
            return true;
        } finally {
            lookaheadRoutineNesting = 0;
            currentLookaheadToken = null;
            hitFailure = false;
        }
    }

    // lookahead routine for lookahead at:
    // src/main/resources/SqlExprParser.ccc:377:9
    private boolean check$SqlExprParser_ccc$377$15(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:377:16
            if (!scanToken(_TOKEN_26, _TOKEN_27)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:377:25
            // NonTerminal multExpr at src/main/resources/SqlExprParser.ccc:377:25
            pushOntoLookaheadStack("addExpression", "src/main/resources/SqlExprParser.ccc", 377, 25);
            currentLookaheadProduction = "multExpr";
            try {
                if (!check$multExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // lookahead routine for lookahead at:
    // src/main/resources/SqlExprParser.ccc:433:9
    private boolean check$SqlExprParser_ccc$433$15(boolean scanToEnd) {
        int prevRemainingLookahead = remainingLookahead;
        boolean prevHitFailure = hitFailure;
        Token prevScanAheadToken = currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for Terminal specified at src/main/resources/SqlExprParser.ccc:433:15
            if (!scanToken(_TOKEN_26)) return false;
            if (hitFailure) return false;
            if (remainingLookahead <= 0) return true;
            // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:433:19
            // NonTerminal unaryExpr at src/main/resources/SqlExprParser.ccc:433:19
            pushOntoLookaheadStack("unaryExpr", "src/main/resources/SqlExprParser.ccc", 433, 19);
            currentLookaheadProduction = "unaryExpr";
            try {
                if (!check$unaryExpr(true)) return false;
            } finally {
                popLookaheadStack();
            }
            return !hitFailure;
        } finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken = prevScanAheadToken;
            remainingLookahead = prevRemainingLookahead;
            hitFailure = prevHitFailure;
        }
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$orExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:185:9
        // NonTerminal andExpression at src/main/resources/SqlExprParser.ccc:185:9
        pushOntoLookaheadStack("orExpression", "src/main/resources/SqlExprParser.ccc", 185, 9);
        currentLookaheadProduction = "andExpression";
        try {
            if (!check$andExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:186:9
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$187$13(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:193:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$andExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:207:9
        // NonTerminal equalityExpression at src/main/resources/SqlExprParser.ccc:207:9
        pushOntoLookaheadStack("andExpression", "src/main/resources/SqlExprParser.ccc", 207, 9);
        currentLookaheadProduction = "equalityExpression";
        try {
            if (!check$equalityExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:208:9
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$209$13(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:215:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$equalityExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:227:9
        // NonTerminal comparisonExpression at src/main/resources/SqlExprParser.ccc:227:9
        pushOntoLookaheadStack("equalityExpression", "src/main/resources/SqlExprParser.ccc", 227, 9);
        currentLookaheadProduction = "comparisonExpression";
        try {
            if (!check$comparisonExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:228:9
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$230$13(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:252:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$comparisonExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:269:9
        // NonTerminal addExpression at src/main/resources/SqlExprParser.ccc:269:9
        pushOntoLookaheadStack("comparisonExpression", "src/main/resources/SqlExprParser.ccc", 269, 9);
        currentLookaheadProduction = "addExpression";
        try {
            if (!check$addExpression(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:270:9
        boolean passedPredicate6 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token7 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$272$17(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token7;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate6;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:364:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$addExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:375:5
        // NonTerminal multExpr at src/main/resources/SqlExprParser.ccc:375:5
        pushOntoLookaheadStack("addExpression", "src/main/resources/SqlExprParser.ccc", 375, 5);
        currentLookaheadProduction = "multExpr";
        try {
            if (!check$multExpr(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:376:5
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$377$9(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:391:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$multExpr(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for NonTerminal specified at src/main/resources/SqlExprParser.ccc:402:5
        // NonTerminal unaryExpr at src/main/resources/SqlExprParser.ccc:402:5
        pushOntoLookaheadStack("multExpr", "src/main/resources/SqlExprParser.ccc", 402, 5);
        currentLookaheadProduction = "unaryExpr";
        try {
            if (!check$unaryExpr(false)) return false;
        } finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ZeroOrMore specified at src/main/resources/SqlExprParser.ccc:403:5
        boolean passedPredicate4 = passedPredicate;
        try {
            while (remainingLookahead > 0 && !hitFailure) {
                Token token5 = currentLookaheadToken;
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$404$9(false)) {
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    currentLookaheadToken = token5;
                    break;
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        hitFailure = false;
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:420:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$unaryExpr(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:433:9
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!check$SqlExprParser_ccc$433$9(false)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!check$SqlExprParser_ccc$436$9(false)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$441$9(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        if (passedPredicate && !legacyGlitchyLookahead) return false;
                        passedPredicate = false;
                        if (!check$SqlExprParser_ccc$446$9(false)) {
                            currentLookaheadToken = token4;
                            remainingLookahead = remainingLookahead4;
                            hitFailure = hitFailure4;
                            return false;
                        }
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:448:5
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private boolean check$primaryExpr(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for ExpansionChoice specified at src/main/resources/SqlExprParser.ccc:460:9
        Token token4 = currentLookaheadToken;
        int remainingLookahead4 = remainingLookahead;
        boolean hitFailure4 = hitFailure;
        boolean passedPredicate4 = passedPredicate;
        try {
            passedPredicate = false;
            if (!scanToken(first_set$SqlExprParser_ccc$460$9)) {
                currentLookaheadToken = token4;
                remainingLookahead = remainingLookahead4;
                hitFailure = hitFailure4;
                if (passedPredicate && !legacyGlitchyLookahead) return false;
                passedPredicate = false;
                if (!scanToken(ID)) {
                    currentLookaheadToken = token4;
                    remainingLookahead = remainingLookahead4;
                    hitFailure = hitFailure4;
                    if (passedPredicate && !legacyGlitchyLookahead) return false;
                    passedPredicate = false;
                    if (!check$SqlExprParser_ccc$464$9(false)) {
                        currentLookaheadToken = token4;
                        remainingLookahead = remainingLookahead4;
                        hitFailure = hitFailure4;
                        return false;
                    }
                }
            }
        } finally {
            passedPredicate = passedPredicate4;
        }
        if (hitFailure) return false;
        if (remainingLookahead <= 0) return true;
        // Lookahead Code for CodeBlock specified at src/main/resources/SqlExprParser.ccc:466:5
        return true;
    }

    private ArrayList<NonTerminalCall> parsingStack = new ArrayList<>();
    private final ArrayList<NonTerminalCall> lookaheadStack = new ArrayList<>();

    private void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall("SqlExprParser", token_source, fileName, methodName, line, column));
    }

    private void popCallStack() {
        NonTerminalCall ntc = parsingStack.remove(parsingStack.size() - 1);
        this.currentlyParsedProduction = ntc.productionName;
    }

    private void restoreCallStack(int prevSize) {
        while (parsingStack.size() > prevSize) {
            popCallStack();
        }
    }

    private void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall("SqlExprParser", token_source, fileName, methodName, line, column));
    }

    private void popLookaheadStack() {
        NonTerminalCall ntc = lookaheadStack.remove(lookaheadStack.size() - 1);
        this.currentLookaheadProduction = ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it = parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: " + currentlyParsedProduction);
        ps.println("Current Lookahead Production is: " + currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token nextToken = nextToken(lastConsumedToken);
        if (nextToken.getType() != expectedType) {
            nextToken = handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken = nextToken;
        this.nextTokenType = null;
        if (buildTree && tokensAreNodes) {
            lastConsumedToken.open();
            pushNode(lastConsumedToken);
            lastConsumedToken.close();
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private boolean buildTree = true;
    private boolean tokensAreNodes = true;
    private boolean unparsedTokensAreNodes = false;

    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes = unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes = tokensAreNodes;
    }

    NodeScope currentNodeScope = new NodeScope();

    /**
    * @return the root node of the AST. It only makes sense to call
    * this after a successful parse.
    */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
    * push a node onto the top of the node stack
    * @param n the node to push
    */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /**
    * @return the node on the top of the stack, and remove it from the
    * stack.
    */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /**
    * @return the node currently on the top of the tree-building stack.
    */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
    * Puts the node on the top of the stack. However, unlike pushNode()
    * it replaces the node that is currently on the top of the stack.
    * This is effectively equivalent to popNode() followed by pushNode(n)
    * @param n the node to poke
    */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /**
    * Replace the type of the last consumed token and poke it onto the
    * stack.
    */
    protected void replaceTokenType(TokenType tt) {
        lastConsumedToken = lastConsumedToken.replaceType(tt);
        pokeNode(lastConsumedToken);
    }

    /**
    * @return the number of Nodes on the tree-building stack in the current node
    * scope.
    */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n != null) {
            n.setTokenSource(lastConsumedToken.getTokenSource());
            // We set the begin/end offsets based on the ending location
            // of the last consumed token. So, we start with a Node
            // of length zero. Typically this is overridden in the
            // closeNodeScope() method, unless this node has no children
            n.setBeginOffset(lastConsumedToken.getEndOffset());
            n.setEndOffset(n.getBeginOffset());
            n.setTokenSource(this.token_source);
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
    * children.  That number of nodes are popped from the stack and
    * made the children of the definite node.  Then the definite node
    * is pushed on to the stack.
    * @param n is the node whose scope is being closed
    * @param num is the number of child nodes to pop as children
    * @return @{code true}
    */
    private boolean closeNodeScope(Node n, int num) {
        n.setBeginOffset(lastConsumedToken.getEndOffset());
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            if (child.getInputSource() == n.getInputSource()) {
                n.setBeginOffset(child.getBeginOffset());
                break;
            }
        }
        for (Node child : nodes) {
            if (unparsedTokensAreNodes && child instanceof Token) {
                Token tok = (Token) child;
                while (tok.previousCachedToken() != null && tok.previousCachedToken().isUnparsed()) {
                    tok = tok.previousCachedToken();
                }
                boolean locationSet = false;
                while (tok.isUnparsed()) {
                    n.add(tok);
                    if (!locationSet && tok.getInputSource() == n.getInputSource() && tok.getBeginOffset() < n.getBeginOffset()) {
                        n.setBeginOffset(tok.getBeginOffset());
                        locationSet = true;
                    }
                    tok = tok.nextCachedToken();
                }
            }
            if (child.getInputSource() == n.getInputSource()) {
                n.setEndOffset(child.getEndOffset());
            }
            n.add(child);
        }
        n.close();
        pushNode(n);
        return true;
    }

    /**
    * A conditional node is constructed if the condition is true.  All
    * the nodes that have been pushed since the node was opened are
    * made children of the conditional node, which is then pushed
    * on to the stack.  If the condition is false the node is not
    * constructed and they are left on the stack.
    */
    private boolean closeNodeScope(Node n, boolean condition) {
        if (n == null || !condition) {
            currentNodeScope.close();
            return false;
        }
        return closeNodeScope(n, nodeArity());
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree = buildTree;
    }


    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;

        NodeScope() {
            this.parentScope = SqlExprParser.this.currentNodeScope;
            SqlExprParser.this.currentNodeScope = this;
        }

        boolean isRootScope() {
            return parentScope == null;
        }

        Node rootNode() {
            NodeScope ns = this;
            while (ns.parentScope != null) {
                ns = ns.parentScope;
            }
            return ns.isEmpty() ? null : ns.get(0);
        }

        Node peek() {
            if (isEmpty()) {
                return parentScope == null ? null : parentScope.peek();
            }
            return get(size() - 1);
        }

        Node pop() {
            return isEmpty() ? parentScope.pop() : remove(size() - 1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            } else {
                set(size() - 1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            SqlExprParser.this.currentNodeScope = parentScope;
        }

        int nestingLevel() {
            int result = 0;
            NodeScope parent = this;
            while (parent.parentScope != null) {
                result++;
                parent = parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone = (NodeScope) super.clone();
            if (parentScope != null) {
                clone.parentScope = parentScope.clone();
            }
            return clone;
        }

    }

}


